worker_processes  auto;

events {
    worker_connections  1024;
}

http {
    gzip on;
    gzip_comp_level 2;
    gzip_min_length 512;
    gzip_proxied any; # Heroku router sends Via header

    # Trusted Proxy
    # set_real_ip_from 10.0.0.0/8;
    # real_ip_header X-Forwarded-For;
    # real_ip_recursive on;

    include         mime.types;
    default_type    application/octet-stream;

    sendfile        on;

    server_tokens   off;

    # Must read the body in 5 seconds.
    client_body_timeout 5;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log logs/access.log  main;

    # access_log off;

    geo $limit {
        default 1;
        10.0.0.0/8 0;
        172.16.0.0/12 0;
        192.168.0.0/24 0;
        127.0.0.0/8 0;
    }
    
    # Only rate limit non-private clients
    map $limit $limit_key {
        0 "";
        1 $binary_remote_addr;
    }

    limit_req_zone $limit_key zone=req_zone:10m rate=15r/s;

    # Use the same PORT in .env or docker-compose.yml if using Docker
    upstream backend_server {
        server localhost:36000;
    }

    # Private IP ranges
    allow   192.168.0.0/16;
    allow   172.16.0.0/12;
    allow   127.0.0.0/8;
    allow   10.0.0.0/8;

    # allow   <public ip>;
    # deny    all;

    server {
        listen       80;
        server_name  localhost;

        keepalive_timeout 5 5;

        # Rate Limit
        limit_req zone=req_zone burst=20 nodelay;

        # Path to static content
        set $root_static_content "C:\....\src\public";

        # Uncomment this if statement to force SSL/redirect http -> https
        # if ($http_x_forwarded_proto != "https") {
        #     return 301 https://$host$request_uri;
        # }

        location / {
            root  $root_static_content;
            index index.html;

            # Since we're serving static content from Nginx we need to add the headers here
            add_header Access-Control-Allow-Origin *;
            add_header Accept-Ranges bytes;
            add_header Content-Security-Policy "script-src 'self' 'unsafe-inline' 'sha256-Zww3/pDgfYVU8OPCr/mr7NFf4ZA0lY1Xeb22wR47e0w=';default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src-attr 'none';style-src 'self' https: 'unsafe-inline'";
            add_header Cross-Origin-Opener-Policy same-origin;
            add_header Cross-Origin-Resource-Policy same-origin;
            add_header Referrer-Policy no-referrer;
            add_header Strict-Transport-Security "max-age=15552000; includeSubDomains";

            # Security Headers
            add_header X-Content-Type-Options nosniff;
            add_header X-DNS-Prefetch-Control off;
            add_header X-Download-Options noopen;
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Permitted-Cross-Domain-Policies none;
            add_header X-XSS-Protection 0;

            expires 30d;

            # Check if endpoint is a file otherwise change to named location
            try_files $uri $uri/ @backend;
        }

        location @backend {
            access_log  logs/api.access.log  main;

            proxy_set_header Host $host;
            
            # Replace X-Forwarded-For
            proxy_set_header X-Forwarded-For $remote_addr;

            proxy_redirect off;
            proxy_pass http://backend_server;
        }

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root  $root_static_content;
        }
    }
}
